# This is a basic workflow to help you get started with Actions

name: Parametrizied pipeline

# Controls when the workflow will run
on:
  # # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (e.g., dev, staging, prod)'
        required: true
        default: 'dev'
      

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: 'eu-central-1'  # zmień na swój region
      TF_VAR_FILE: 'tfvars/${{ github.event.inputs.env }}.tfvars'
      WORKING-DIRECTORY: 'environments'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'  # zmień na wersję, której używasz
  
      - name: Terraform Init
        working-directory: ${{ env.WORKING-DIRECTORY }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.WORKING-DIRECTORY }}
        run: terraform plan -var-file=${{ env.TF_VAR_FILE }}

      - name: Terraform Apply
        working-directory: ${{ env.WORKING-DIRECTORY }}
        run: terraform apply -auto-approve -var-file=${{ env.TF_VAR_FILE }}

      - name: Terraform destroy
        run: terraform destroy -auto-approve

